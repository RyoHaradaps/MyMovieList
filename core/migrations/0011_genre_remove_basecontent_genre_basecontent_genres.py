# Generated by Django 5.2.3 on 2025-06-20 05:21

from django.db import migrations, models

def migrate_genres_forward(apps, schema_editor):
    """
    Migrates data from the old 'genre' CharField to the new 'genres' ManyToManyField.
    The old genre field contained a comma-separated string of genre names.
    """
    BaseContent = apps.get_model('core', 'BaseContent')
    Genre = apps.get_model('core', 'Genre')
    db_alias = schema_editor.connection.alias

    for content in BaseContent.objects.using(db_alias).all():
        if content.genre:
            genre_names = [name.strip() for name in content.genre.split(',')]
            for genre_name in genre_names:
                if not genre_name:
                    continue
                # Get or create the genre object
                genre_obj, created = Genre.objects.using(db_alias).get_or_create(name=genre_name)
                # Add it to the ManyToMany relationship
                content.genres.add(genre_obj)

def do_nothing(apps, schema_editor):
    # The reverse operation is complex and would involve data loss.
    # We will not support reverting this data migration.
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0010_character_staff_theme_voiceactor'),
    ]

    operations = [
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.AddField(
            model_name='basecontent',
            name='genres',
            field=models.ManyToManyField(blank=True, to='core.genre'),
        ),
        # Run the data migration
        migrations.RunPython(migrate_genres_forward, do_nothing),
        # Now it is safe to remove the old field
        migrations.RemoveField(
            model_name='basecontent',
            name='genre',
        ),
    ]
